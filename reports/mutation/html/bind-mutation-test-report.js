document.querySelector('mutation-test-report-app').report = {"files":{"/home/camilo/walmart-assessment-backend/src/health/health.controller.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":4,"line":9},"start":{"column":44,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: HealthController should get health check"},{"id":"2","location":{"end":{"column":69,"line":8},"start":{"column":23,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: HealthController should get health check"},{"id":"1","location":{"end":{"column":71,"line":8},"start":{"column":12,"line":8}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: HealthController should get health check"}],"source":"import { Controller, Get } from '@nestjs/common';\nimport { HealthOutputDto } from './dto/health-output.dto';\n\n@Controller('health')\nexport class HealthController {\n  @Get()\n  public getHealthCheck(): HealthOutputDto {\n    return { message: 'walmart-assessment-backend is up and running' };\n  }\n}\n"},"/home/camilo/walmart-assessment-backend/src/products/products.service.ts":{"language":"typescript","mutants":[{"id":"24","location":{"end":{"column":43,"line":21},"start":{"column":22,"line":21}},"mutatorName":"StringLiteral","replacement":"``","status":"Killed","description":"Killed by: ProductsService should perform query against database using search string"},{"id":"11","location":{"end":{"column":40,"line":13},"start":{"column":9,"line":13}},"mutatorName":"LogicalOperator","replacement":"!onlyNumbers || !moreThan3Chars","status":"Killed","description":"Killed by: ProductsService should perform query against database using product id"},{"id":"5","location":{"end":{"column":52,"line":12},"start":{"column":28,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: ProductsService should throw bad request error if id is not valid"},{"id":"14","location":{"end":{"column":6,"line":15},"start":{"column":42,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: ProductsService should throw bad request error if id is not valid"},{"id":"15","location":{"end":{"column":98,"line":14},"start":{"column":31,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: ProductsService should throw bad request error if id is not valid"},{"id":"21","location":{"end":{"column":23,"line":20},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: ProductsService should perform query against database using product id"},{"id":"8","location":{"end":{"column":52,"line":12},"start":{"column":28,"line":12}},"mutatorName":"EqualityOperator","replacement":"searchString.length < 3","status":"Killed","description":"Killed by: ProductsService should throw bad request error if id is not valid"},{"id":"7","location":{"end":{"column":52,"line":12},"start":{"column":28,"line":12}},"mutatorName":"EqualityOperator","replacement":"searchString.length > 3","status":"Survived"},{"id":"17","location":{"end":{"column":20,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: ProductsService should perform query against database using search string"},{"id":"20","location":{"end":{"column":46,"line":18},"start":{"column":16,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: ProductsService should perform query against database using product id"},{"id":"10","location":{"end":{"column":40,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: ProductsService should throw bad request error if id is not valid"},{"id":"22","location":{"end":{"column":23,"line":20},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: ProductsService should perform query against database using search string"},{"id":"9","location":{"end":{"column":40,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: ProductsService should perform query against database using product id"},{"id":"6","location":{"end":{"column":52,"line":12},"start":{"column":28,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: ProductsService should perform query against database using search string"},{"id":"13","location":{"end":{"column":40,"line":13},"start":{"column":25,"line":13}},"mutatorName":"BooleanLiteral","replacement":"moreThan3Chars","status":"Killed","description":"Killed by: ProductsService should throw bad request error if id is not valid"},{"id":"16","location":{"end":{"column":19,"line":16},"start":{"column":17,"line":16}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed","description":"Killed by: ProductsService should perform query against database using product id"},{"id":"18","location":{"end":{"column":20,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: ProductsService should perform query against database using product id"},{"id":"12","location":{"end":{"column":21,"line":13},"start":{"column":9,"line":13}},"mutatorName":"BooleanLiteral","replacement":"onlyNumbers","status":"Killed","description":"Killed by: ProductsService should throw bad request error if id is not valid"},{"id":"4","location":{"end":{"column":4,"line":26},"start":{"column":85,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: ProductsService should throw bad request error if id is not valid"},{"id":"19","location":{"end":{"column":6,"line":19},"start":{"column":22,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: ProductsService should perform query against database using product id"},{"id":"28","location":{"end":{"column":35,"line":23},"start":{"column":25,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: ProductsService should perform query against database using search string"},{"id":"23","location":{"end":{"column":6,"line":24},"start":{"column":25,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: ProductsService should perform query against database using search string"},{"id":"29","location":{"end":{"column":42,"line":25},"start":{"column":35,"line":25}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: ProductsService should perform query against database using product id"},{"id":"25","location":{"end":{"column":43,"line":22},"start":{"column":16,"line":22}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: ProductsService should perform query against database using search string"},{"id":"26","location":{"end":{"column":41,"line":22},"start":{"column":31,"line":22}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: ProductsService should perform query against database using search string"},{"id":"27","location":{"end":{"column":37,"line":23},"start":{"column":16,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: ProductsService should perform query against database using search string"}],"source":"import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Product, ProductDocument } from './schemas/product.schema';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class ProductsService {\n  constructor(@InjectModel(Product.name) private readonly productModel: Model<ProductDocument>) {}\n\n  public async findProductsBySearchString(searchString: string): Promise<Product[]> {\n    const onlyNumbers = /^[0-9]+$/.test(searchString);\n    const moreThan3Chars = searchString.length >= 3;\n    if (!onlyNumbers && !moreThan3Chars) {\n      throw new HttpException('Search strings shorter than 3 characters must be valid product id', HttpStatus.BAD_REQUEST);\n    }\n    const $or = [];\n    if (onlyNumbers) {\n      $or.push({ id: parseInt(searchString) });\n    }\n    if (moreThan3Chars) {\n      const $regex = `.*${searchString}.*`;\n      $or.push({ description: { $regex } });\n      $or.push({ brand: { $regex } });\n    }\n    return this.productModel.find({ $or });\n  }\n}\n"},"/home/camilo/walmart-assessment-backend/src/products/products.controller.ts":{"language":"typescript","mutants":[{"id":"3","location":{"end":{"column":4,"line":15},"start":{"column":95,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: ProductsController should find products using search string from query"}],"source":"import { Controller, Get, Query, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { FindProductsInputDto } from './dto/find-products-input.dto';\nimport { ProductsService } from './products.service';\nimport { Product } from './schemas/product.schema';\n\n@Controller('products')\nexport class ProductsController {\n  constructor(private readonly productsSercvice: ProductsService) {}\n\n  @Get('')\n  @UsePipes(new ValidationPipe({ transform: true }))\n  public async findProducts(@Query() productsQuery: FindProductsInputDto): Promise<Product[]> {\n    const { searchString } = productsQuery;\n    return await this.productsSercvice.findProductsBySearchString(searchString);\n  }\n}\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};